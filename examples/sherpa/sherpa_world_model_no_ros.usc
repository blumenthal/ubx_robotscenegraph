-- This system coposition relizes a SHERPA World Model for a
-- single robot. Each robot deploys one such SHERPA World Model 
-- (potentially in slightly varing compositons).
-- 
-- This system uses Zyre bridges to communicate with multiple
-- SHERPA World Models. Though, the communiation layer can be replaced
-- by adopting this composition file.
-- 
-- Overview:
--           +-----------+            +-----------+
--  ZYRE <-> | SHERPA WM | <- ZYRE -> | SHERPA WM | <-> ZYRE
-- (ZMQ) <-> |           |            |           | <-> (ZMQ)
--           |           |            |           | 
--           +-----------+            +-----------+
--
-- To some extend the SHERPA World Model can be seem as a proxy of
-- the application wide world model.
--
-- Note, this version keeps the ZMQ REQ-REP for backwards compatibility.
-- Further note, the are some options on how to use the Zyre:
--
--  1.) With gossip discovery. This is required when it is used with a Mediator.
--      Plase note, at leas one participant od a Zyre network as to "bind". It
--      kind of acts like a master. Even a SWM can bind if necessary. 
--  2.) With UDP beaconing discovery. This is mostly for testing (without the Mediator)
--

--------------------------------------RSG--------------------------------------

local rsg = require("rsg")

-- Util funtion to get environment variables with default values incase they are not defined
function getEnvWithDefault(variableName, defaultValue)
  local envVariable = os.getenv(variableName)
  if envVariable == nil then
    print("ENV variable " .. variableName .. " is not set. Using default value = " .. defaultValue)
    return defaultValue
  end
  print("ENV variable " .. variableName .. " is set = " .. envVariable) 
  return envVariable    
end

local logLevel = tonumber(getEnvWithDefault("SWM_LOG_LEVEL", 1)) --  LOGDEBUG = 0, INFO = 1, WARNING = 2, LOGERROR = 3, FATAL = 4

-- create an inctance of the RSG to serve as World Model Agent for the robot 
local worldModelAgentName = getEnvWithDefault("SWM_WMA_NAME", "swm") -- human radable name to better identify this WMA; Moslty for debugging
local worldModelAgentId = getEnvWithDefault("SWM_WMA_ID", "") -- Every SHERPA WM needs a unique number. E.g. use uuidgen to generate fresh ones or set it to "" to auto generate numbers (recommeded)
local worldModelGlobalId = getEnvWithDefault("SWM_GLOBAL_ID", "e379121f-06c6-4e21-ae9d-ae78ec1986a1") -- application global root Id.

if worldModelAgentId == "" then
  print("No agent ID specified. Generating a new one.")
  wm = rsg.WorldModel() -- Defualt with auto generated rootId, this is recommended.
else
  wm = rsg.WorldModelWithId(worldModelAgentId) -- Manually specified rootId 
end

rootId = wm:getRootId()
print("World Model Agent has root Id = " .. rootId)
wm:addNodeAttribute(rootId, "name", worldModelAgentName .. "_started_" .. os.date("%Y-%m-%d_%H-%M-%S")); -- optional; can cause crashes when modifies for a second time
--wm:addNodeAttribute(rootId, "rsg:agent_policy", "no GeometricNodes");
wm:setLogLevel(1)

-- optionally load constraints bases on a lua file. Typcally this is:  "examples/sherpa/constraints.lua" use "" to disable this feature
local constraints_file = getEnvWithDefault("SWM_CONSTRAINTS_FILE", "examples/sherpa/constraints.lua")
if constraints_file == "" then
  print("No graph constraints file specified. Ignoring it")
else
  print("Graph constraints file specified. File is: " .. constraints_file)  
  dofile(constraints_file)
end

----------------------------------helper functions-----------------------------

-- Below is a set of functions that can be called at runtime by 
-- typing them into the command line interface.

-- Convenience function to start the system in on shot
function start_wm() -- no particular order assumed here
  ni:b("rsgjsonsender"):do_start()
  ni:b("rsgjsonreciever"):do_start()
  ni:b("zmq_rsgjsonqueryrunner"):do_start()
  ni:b("zyre_rsgjsonqueryrunner"):do_start()
  ni:b("rsgdump"):do_start()
  ni:b("zmq_json_query_server"):do_init()
  ni:b("zmq_json_query_server"):do_start()
--  ni:b("ros_json_publisher"):do_start()
--  ni:b("ros_json_subscriber"):do_start()
  ni:b("zyre_updates_output_buffer"):do_start()
--  ni:b("zyre_updates_input_buffer"):do_start() -- superseeded by zyre_rsgjsonqueryrunner
--  ni:b("ros_updates_output_buffer"):do_start()
--  ni:b("ros_updates_input_buffer"):do_start()
  ni:b("zmq_query_req_buffer"):do_start()
  ni:b("zmq_query_rep_buffer"):do_start()
  ni:b("zyre_query_req_buffer"):do_start()
  ni:b("zyre_query_rep_buffer"):do_start()
  ni:b("zyre_local_bridge"):do_start()
  ni:b("cyclic_io_trigger"):do_start() 
--  ni:b("dbg_hexdump"):do_init()  
--  ni:b("dbg_hexdump"):do_start()   
end

-- Created as single dump of the RSG. It is stored on a dot file
-- and can be converted to e.g. pdf files
function dump_wm()
  ni:b("rsgdump"):do_step()
end

-- Alias p for print for dump_wm()
function p()
  dump_wm()
end  

-- Load an Open Street Map based on the osmloader function block.
-- Cf. "configurations" section below to configure the file that will be loaded.
function load_map()
  ni:b("osm"):do_start()
  ni:b("osm"):do_step()
end

-- Loads a scene sceen setup based on a json file.
-- Cf. "configurations" section below to configure the file that will be loaded.
function scene_setup()
  ni:b("scenesetup"):do_start()
  ni:b("scenesetup"):do_step()
end

-- Trigger full syncronisation. 
function sync()
--  ni:b("rsghdf5sender"):do_step() -- Robot to Robot
  ni:b("rsgjsonsender"):do_step() -- Internal Robot (Bridges)
end

function start_auto_sync()
  ni:b("cyclic_sync_trigger"):do_start() 
end

-- This is the entry function that should be called after launch.
-- This has to be done manually (currently).
-- Feel free to make further aplication specific adjustments. 
function start_all()
--  scene_setup()
--  load_map()
  os.execute("sleep 1")
  start_wm()
  fbx_setup()
  sync() -- just to be on the safe side
  start_auto_sync()
  os.execute("sleep 1")
end

-- Alias s for start, calls start_all()
function s()
  start_all()
end  

-- Send a JOSN message directly to the RSG.
-- It will be placed in the input buffer as any other incomming message.
-- e.g. 
-- local msg = "{\"@worldmodeltype\": \"RSGQuery\",\"query\": \"GET_NODES\",\"attributes\": [{\"key\": \"name\", \"value\": \"*\"}]}"   
-- send_json_to_swm(msg)
function send_json_to_rsg(msg)
  print("Sending a RSG-JSON message via the interactive Lua console.")
  --local msg = "{\"@worldmodeltype\": \"RSGQuery\",\"query\": \"GET_NODES\",\"attributes\": [{\"key\": \"name\", \"value\": \"*\"}]}"   
  local data=ubx.data_alloc(ni, "unsigned char", 1)  -- UBX data type
  ubx.data_set(data, msg)                      -- write the  JSON message to it 
  ubx.data_resize(data, ubx.data_size(data)-1) -- remove trailing null termination
  ni:block_get("zyre_query_req_buffer"):write(data)
end 

function load_function_block(name)
  local fbx_modules = os.getenv("FBX_MODULES")
  if fbx_modules == nil then
    print("fbx_setup() FBX_MODULES is not set. Skipping load_function_block.")
    return 
  end
  fbx_modules = fbx_modules .. "/lib"

  print("Trying to load function block: " .. name)

  local load_block_msg = "{"
  .. "  \"@worldmodeltype\": \"RSGFunctionBlock\","
  .. "  \"metamodel\":       \"rsg-functionBlock-schema.json\","
  .. "  \"name\":            \"" .. name .. "\","
  .. "  \"operation\":       \"LOAD\","
  .. "  \"input\": {"
  .. "    \"metamodel\": \"rsg-functionBlock-path-schema.json\","
  .. "    \"path\":      \"" .. fbx_modules .. "\","
  .. "    \"comment\":   \"path is the same as the FBX_MODULES environment variable appended with a lib/ folder\""
  .. "  }"
  .. "}"   
  send_json_to_rsg(load_block_msg)
end

-- (Try to) load a set of well-known function blocks.
function fbx_setup()
  load_function_block("poselist")
  load_function_block("posehistory")
  load_function_block("nodesinarea")
end

function pa()
--  local msg = "{\"@worldmodeltype\": \"RSGQuery\",\"query\": \"GET_NODES\",\"attributes\": [{\"key\": \"" .. key .. "\", \"value\": \"*\"}]}"   
--  send_json_to_rsg(msg)
end  

function help()
  local helpMsg =
  [[
  
SWM command list  
----------------  
  
  help()                    Prints all possible commands.
  start_all() or s()        Convenience function that calls per default start_wm(), fbx_setup() and sync().
  start_wm()                Starts all core and communication modules for the SWM.
  fbx_setup()               Convenience function to start a set of well known function blocks.
  sync()                    Manually trigger to send the full RSG to all other World Model Agents.
  scene_setup()             Loads an RSG-JSON file as specified in the SWM_OSM_MAP_FILE environment variable.
  load_map()                Loads an OpenStreetMap from a file as specified in the SWM_RSG_MAP_FILE environment variable.
  load_function_block(name) Loads a function block as specified by a name e.g. load_function_block("posehistory").
                            It is safe to call it multiple times. Used by fbx_setup()
  dump_wm() or p()          Dump the current world model into a graphviz file.

  
Typical invocations after start
-------------------------------

  s()
  scene_setup()     
  
  ]]
  print(helpMsg)
end

--------------------------configuaration (ENV variables)-----------------------

-- Communication configuration with reasonable default values. Can be adapted here or 
-- be setting the respective environment variable.
-- e.g. export SWM_LOCAL_JSON_QUERY_PORT=22422
--
local local_json_query_port = getEnvWithDefault("SWM_LOCAL_JSON_QUERY_PORT", "22422") -- Use this port to send queries via ZMQ REQ-REP
-- Gossip related configuration:
local use_gossip= tonumber(getEnvWithDefault("SWM_USE_GOSSIP", 0)) -- 1 use gossip; 0 use UDB beaconing; 1 id default since the Mediator is usiong ot 
local bind_zyre = tonumber(getEnvWithDefault("SWM_BIND_ZYRE", 0)) -- 1 => this SWM "binds". There must be exactly one Zyre nore that binds. In case a Mediator is used, it will bind. Thus 0 is default  
local gossip_endpoint =    getEnvWithDefault("SWM_GOSSIP_ENDPOINT", "ipc:///tmp/local-hub") -- Gossip endpoint; use this default value unless you want to have multiple Gossip networks
local local_endpoint =     getEnvWithDefault("SWM_LOCAL_ENDPOINT", "ipc:///tmp/sherpa_wm") -- Gossip local endpoint; use this default value unless you want to have multiple Gossip networks
local zyre_group =         getEnvWithDefault("SWM_ZYRE_GROUP", "local") 

-- Filter settings
local enable_input_filter = tonumber(getEnvWithDefault("SWM_ENABLE_INPUT_FILTER", 0)) 
local input_filter_pattern = getEnvWithDefault("SWM_INPUT_FILTER_PATTERN", "os(m|g)")
local max_transform_freq = tonumber(getEnvWithDefault("SWM_MAX_TRANSFORM_FREQ", 5.0))

-- Map files
local rsg_map_file = getEnvWithDefault("SWM_RSG_MAP_FILE", "examples/maps/rsg/sherpa_basic_mission_setup.json")
local osm_map_file = getEnvWithDefault("SWM_OSM_MAP_FILE", "examples/maps/osm/map_micro_champoluc.osm") 

-- Debug visualization
local generate_dot_files = tonumber(getEnvWithDefault("SWM_GENERATE_DOT_FILES", 0))
local generate_img_files = tonumber(getEnvWithDefault("SWM_GENERATE_IMG_FILES", 0)) -- requres generate_dot_files to be true
local store_dot_history = tonumber(getEnvWithDefault("SWM_STORE_DOT_HISTORY", 0)) -- requres generate_dot_files to be true
local store_log_files = tonumber(getEnvWithDefault("SWM_STORE_LOG_FILES", 0))
local store_hdf_files = tonumber(getEnvWithDefault("SWM_STORE_HDF_FILES", 0))

--------------------------------THE system model------------------------------- 

return bd.system
  {
    imports = {
      "std_types/stdtypes/stdtypes.so",
      "std_blocks/ptrig/ptrig.so",
      "std_blocks/lfds_buffers/lfds_cyclic.so",
      "std_blocks/lfds_buffers/lfds_cyclic_raw.so",
      "std_blocks/hexdump/hexdump.so",
      
       -- RSG blocks
      "types/rsg_types.so",  
      "blocks/rsgjsonrecieverlib.so",
      "blocks/rsgjsonsenderlib.so",
      "blocks/rsgjsonquerylib.so",
      "blocks/rsgscenesetuplib.so",

      -- RSG function blocks
      "blocks/rsgdumplib.so",
      "blocks/osmloader.so",

      -- ZMQ/Zyre communication blocks
      "blocks/zyrebridgelib.so", 
      "blocks/zmqserverlib.so", -- optional
     
      -- optional ROS communication blocks
--      "blocks/rossenderlib.so",
--      "blocks/rosreceiverlib.so"
    },

    blocks = {
      { name="rsgjsonsender", type="rsg_json_sender" },
      { name="rsgjsonreciever", type="rsg_json_reciever" },
      { name="zmq_rsgjsonqueryrunner", type="rsg_json_query" },
      { name="zyre_rsgjsonqueryrunner", type="rsg_json_query" },
      { name="zmq_json_query_server", type="zmq_server" },
--      { name="ros_json_publisher", type="ros_sender" },
--      { name="ros_json_subscriber", type="ros_receiver" },
      { name="scenesetup", type="rsg_scene_setup" },
      { name = "osm", type="osmloader/osmloader" },
      { name="rsgdump", type="rsg_dump" },
      
      -- Note, we have to explicitly configure the buffers for large message sizes (cf. config setion)
      -- Zyre
      { name="zyre_updates_output_buffer",type="lfds_buffers/cyclic_raw" },
      { name="zyre_updates_input_buffer",type="lfds_buffers/cyclic_raw" },
      { name="zyre_local_bridge", type="zyre_bridge" },

      -- JSON based queries to WM
      { name="zmq_query_req_buffer",type="lfds_buffers/cyclic_raw" },
      { name="zmq_query_rep_buffer",type="lfds_buffers/cyclic_raw" },
      { name="zyre_query_req_buffer",type="lfds_buffers/cyclic_raw" },
      { name="zyre_query_rep_buffer",type="lfds_buffers/cyclic_raw" },

      -- ROS
--      { name="ros_updates_output_buffer",type="lfds_buffers/cyclic_raw" }, 
--      { name="ros_updates_input_buffer",type="lfds_buffers/cyclic_raw" },

      -- Scheduler(s)
      { name="cyclic_io_trigger", type="std_triggers/ptrig" }, -- we have to poll if something is in the input buffer
      { name="cyclic_sync_trigger", type="std_triggers/ptrig" },
      
      -- Debug
      { name = "dbg_hexdump", type="hexdump/hexdump" }
    },

    connections = {

      -- Zyre updates
      { src="rsgjsonsender.rsg_out", tgt="zyre_updates_output_buffer" },
      { src="zyre_updates_output_buffer", tgt="zyre_local_bridge.zyre_out" },       
      { src="zyre_local_bridge.zyre_in", tgt="zyre_updates_input_buffer" },
      { src="zyre_updates_input_buffer", tgt="rsgjsonreciever.rsg_in" },     
      -- Zyre queries
      { src="zyre_local_bridge.zyre_in", tgt="zyre_query_req_buffer" },
      { src="zyre_query_req_buffer", tgt="zyre_rsgjsonqueryrunner.rsq_query" },
      { src="zyre_rsgjsonqueryrunner.rsg_result", tgt="zyre_query_rep_buffer" },
      { src="zyre_query_rep_buffer", tgt="zyre_local_bridge.zyre_out" },

      -- ZMQ REQ-REP server and JSON query runner
      { src="zmq_json_query_server.zmq_req", tgt="zmq_query_req_buffer" },
--      { src="zyre_local_bridge.zyre_in", tgt="dbg_hexdump" }, --DBG
      { src="zmq_query_req_buffer", tgt="zmq_rsgjsonqueryrunner.rsq_query" },
      { src="zmq_rsgjsonqueryrunner.rsg_result", tgt="zmq_query_rep_buffer" },
      { src="zmq_query_rep_buffer", tgt="zmq_json_query_server.zmq_rep" },

      -- ROS 
--      { src="rsgjsonsender.rsg_out", tgt="ros_updates_output_buffer" },
--      { src="ros_updates_output_buffer", tgt="ros_json_publisher.ros_out" }, 
--      { src="ros_json_subscriber.ros_in", tgt="ros_updates_input_buffer" },
--      { src="ros_json_subscriber.ros_in", tgt="dbg_hexdump" }, --DBG
--      { src="ros_updates_input_buffer", tgt="rsgjsonreciever.rsg_in" },

    },

    configurations = {
      { name="rsgjsonreciever", 
        config =  { 
          buffer_len=20000, 
          wm_handle={wm = wm:getHandle().wm}, 
          log_level = logLevel, 
          enable_input_filter = enable_input_filter,
          input_filter_pattern = input_filter_pattern,
          remote_root_auto_mount_id = worldModelGlobalId  
        } 
      },
      { name="rsgjsonsender", 
        config =  { 
          wm_handle={wm = wm:getHandle().wm}, 
          store_dot_files = generate_dot_files,           
          generate_svg_files = generate_img_files, 
          store_history_as_dot_files = store_dot_history,      
          dot_name_prefix = worldModelAgentName,
          log_level = logLevel, 
          max_freq = max_transform_freq,
          store_log_files = store_log_files,
          store_hdf_files = store_hdf_files  
        } 
      },
      { name="zyre_local_bridge", 
        config = { 
          max_send=5 ,                -- Max number of msgs that are sent during step fcn." 
          max_msg_length=90000,       -- Max length of msg coming from RSG
          wm_name="SWM_zyre_bridge" , -- Mame of the bridge in the zyre network." 
          group = zyre_group,              -- Zyre group to join. Default is "local".
          gossip_flag = use_gossip, -- 0,            -- 1 for using gossip locally; 0 for using UDP beaconing instead
          gossip_endpoint = gossip_endpoint  , -- Endpoint for zyre gossip discovery. Default is "ipc:///tmp/local-hub"
          bind = bind_zyre, -- 0,         -- Decides whether this node binds or connects to gossip network; The must be at least on node that binds. 
          local_endpoint = local_endpoint, -- local endpoint for zyre network; MUST differ from gossip_endpoint"
          mediator=use_gossip -- 1 for unsing mediator, 0 for not using it

        } 
      },
      { name="zmq_rsgjsonqueryrunner", config =  { buffer_len=90000, wm_handle={wm = wm:getHandle().wm}, log_level = logLevel, store_log_files = store_log_files }},
      { name="zyre_rsgjsonqueryrunner", config =  { buffer_len=90000, wm_handle={wm = wm:getHandle().wm}, log_level = logLevel, store_log_files = store_log_files }},
      { name="zmq_json_query_server", config = { connection_spec="tcp://127.0.1:" .. local_json_query_port } }, 
--      { name="ros_json_publisher", config = { topic_name="world_model/json/updates" } },
--      { name="ros_json_subscriber", config = { topic_name="world_model/json/knowrob_updates" } },
      { name="scenesetup", config =  { wm_handle={wm = wm:getHandle().wm}, rsg_file=rsg_map_file } },
      { name="rsgdump", config =  { wm_handle={wm = wm:getHandle().wm}, dot_name_prefix = "rsg_dump_" .. worldModelAgentName } },
      { name="zyre_updates_output_buffer", config = { element_num=5000 , element_size=20000 } },
      { name="zyre_updates_input_buffer", config = { element_num=50 , element_size=20000 } },
--      { name="ros_updates_output_buffer", config = { element_num=50 , element_size=20000 } },
--      { name="ros_updates_input_buffer", config = { element_num=50 , element_size=20000 } },
      { name="zmq_query_req_buffer", config = { element_num=50 , element_size=90000 } },
      { name="zmq_query_rep_buffer", config = { element_num=50 , element_size=90000 } },
      { name="zyre_query_req_buffer", config = { element_num=2000 , element_size=90000 } }, -- element_num=5000 for a small city map
      { name="zyre_query_rep_buffer", config = { element_num=50 , element_size=90000 } },
      { name="cyclic_io_trigger", -- Note: on first failure the other blocks are not triggered any more...
        config = { 
          period = {sec=0, usec=100 }, 
          trig_blocks={ 
            { b="#rsgjsonreciever", num_steps=1, measure=0 },  
--            { b="#ros_json_publisher", num_steps=1, measure=0 },   
            { b="#zmq_rsgjsonqueryrunner", num_steps=1, measure=0 },
            { b="#zyre_rsgjsonqueryrunner", num_steps=1, measure=0 },  
            { b="#zmq_json_query_server", num_steps=1, measure=0 },
            { b="#zyre_local_bridge", num_steps=1, measure=0 },             
          } 
        } 
      },
      { name="cyclic_sync_trigger", -- Note: on first failure the other blocks are not triggered any more...
        config = { 
          period = {sec=60, usec=0 }, 
          trig_blocks={
            { b="#rsgdump", num_steps=1, measure=0 },  
            { b="#rsgjsonsender", num_steps=1, measure=0 },              
          } 
        } 
      },    
      { name="osm", config =  { wm_handle={wm = wm:getHandle().wm}, map_file=osm_map_file, convert_to_utm = 0, log_level = logLevel } }
    },
}
