-- blockdiagram for a example of a distributed world model

local function get_root()
 return os.getenv("UBX_ROOT").."/"
end

local rsg = require("rsg")

-- create in inscanteced/delegates of the world model 
wm = rsg.WorldModel()
wm_replica = rsg.WorldModel()

return bd.system
{
   imports = {
      get_root().."std_types/stdtypes/stdtypes.so",
      get_root().."std_blocks/ptrig/ptrig.so",
      get_root().."std_blocks/lfds_buffers/lfds_cyclic.so",
      get_root().."std_blocks/logging/file_logger.so",
      "blocks/irospublisher.so",
      "blocks/irossubscriber.so",
      get_root().."std_blocks/random/random.so",
      "types/rsg_types.so",  
      "blocks/rsgrecieverlib.so",
	    "blocks/rsgsenderlib.so",
   },

   blocks = {
      { name="rsgsender", type="rsg_sender" }, -- don't use idenetical names here!
      { name="rsgreciever", type="rsg_reciever" },
      { name="publisher", type="rosbridge/publisher" },
--    { name="randomblx", type="random/random" },
      { name="subscriber", type="rosbridge/subscriber" },
 --     { name="stream_decoder", type="byte_stream_decoder"},
   },
   
   connections = {
      { src="rsgsender.rsg_out", tgt="publisher" },
      { src="subscriber", tgt="rsgreciever.rsg_in" },
   },
   
   configurations = {
   	  { name="rsgsender", config =  { wm_handle={wm = wm:getHandle().wm} } },
   	  { name="rsgreciever", config =  { wm_handle={wm = wm_replica:getHandle().wm} } },
      { name="publisher", config = { topic_name="mytopic" } },
--      { name="subscriber", config = { topic_name="mytopic" } },
      { name="subscriber", config = { topic_name="mytopic" ,
      	trig_blocks={ { b="#rsgreciever", num_steps=1, measure=0 } } } },						
   },
}
