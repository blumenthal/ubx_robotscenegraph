/*
 * rsg_reciever microblx function block (autogenerated, don't edit)
 */

#include <ubx.h>

/* includes types and type metadata */

ubx_type_t types[] = {
        { NULL },
};

/* block meta information */
char rsg_reciever_meta[] =
        " { doc='',"
        "   real-time=true,"
        "}";

/* declaration of block configuration */
ubx_config_t rsg_reciever_config[] = {
        { .name="wm_handle", .type_name = "struct rsg_wm_handle", .doc="Handle to the world wodel instance. This parameter is mandatory." },
        { NULL },
};

/* declaration port block ports */
ubx_port_t rsg_reciever_ports[] = {
        { .name="rsg_in", .in_type_name="unsigned char", .doc="HDF5 based byte stream for updates on RSG based world model."  },
        { NULL },
};

/* declare a struct port_cache */
struct rsg_reciever_port_cache {
        ubx_port_t* rsg_in;
};

/* declare a helper function to update the port cache this is necessary
 * because the port ptrs can change if ports are dynamically added or
 * removed. This function should hence be called after all
 * initialization is done, i.e. typically in 'start'
 */
static void update_port_cache(ubx_block_t *b, struct rsg_reciever_port_cache *pc)
{
        pc->rsg_in = ubx_port_get(b, "rsg_in");
}


/* for each port type, declare convenience functions to read/write from ports */
//def_read_fun(read_rsg_in, unsigned char)

/* block operation forward declarations */
int rsg_reciever_init(ubx_block_t *b);
int rsg_reciever_start(ubx_block_t *b);
void rsg_reciever_stop(ubx_block_t *b);
void rsg_reciever_cleanup(ubx_block_t *b);
void rsg_reciever_step(ubx_block_t *b);


/* put everything together */
ubx_block_t rsg_reciever_block = {
        .name = "rsg_reciever",
        .type = BLOCK_TYPE_COMPUTATION,
        .meta_data = rsg_reciever_meta,
        .configs = rsg_reciever_config,
        .ports = rsg_reciever_ports,

        /* ops */
        .init = rsg_reciever_init,
        .start = rsg_reciever_start,
        .stop = rsg_reciever_stop,
        .cleanup = rsg_reciever_cleanup,
        .step = rsg_reciever_step,
};


/* rsg_reciever module init and cleanup functions */
int rsg_reciever_mod_init(ubx_node_info_t* ni)
{
        DBG(" ");
        int ret = -1;
        ubx_type_t *tptr;

        for(tptr=types; tptr->name!=NULL; tptr++) {
                if(ubx_type_register(ni, tptr) != 0) {
                        goto out;
                }
        }

        if(ubx_block_register(ni, &rsg_reciever_block) != 0)
                goto out;

        ret=0;
out:
        return ret;
}

void rsg_reciever_mod_cleanup(ubx_node_info_t *ni)
{
        DBG(" ");
        const ubx_type_t *tptr;

        for(tptr=types; tptr->name!=NULL; tptr++)
                ubx_type_unregister(ni, tptr->name);

        ubx_block_unregister(ni, "rsg_reciever");
}

/* declare module init and cleanup functions, so that the ubx core can
 * find these when the module is loaded/unloaded */
UBX_MODULE_INIT(rsg_reciever_mod_init)
UBX_MODULE_CLEANUP(rsg_reciever_mod_cleanup)
