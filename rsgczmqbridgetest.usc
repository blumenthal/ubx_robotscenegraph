-- blockdiagram for a example of a distributed world model

local function get_root()
 return os.getenv("UBX_ROOT").."/"
end

local rsg = require("rsg")

-- create in inscanteced/delegates of the world model 
wm = rsg.WorldModel()
wm_replica = rsg.WorldModel()

return bd.system
{
   imports = {
      get_root().."std_types/stdtypes/stdtypes.so",
      get_root().."std_blocks/ptrig/ptrig.so",
      get_root().."std_blocks/lfds_buffers/lfds_cyclic.so",
      get_root().."std_blocks/lfds_buffers/lfds_cyclic_raw.so",
      get_root().."std_blocks/logging/file_logger.so",
      "blocks/zmqreceiverlib.so",
      "blocks/zmqsenderlib.so",
      "types/rsg_types.so",  
      "build/rsgrecieverlib.so",
	  "build/rsgsenderlib.so",
	  "build/rsgscenesetuplib.so",
   },

   -- A mirrowed setup of "componentA and componentB"
   blocks = {
      { name="rsgsenderA", type="rsg_sender" }, -- don't use idenetical names here!
      { name="rsgrecieverA", type="rsg_reciever" },
      { name="rsgsenderB", type="rsg_sender" }, 
      { name="rsgrecieverB", type="rsg_reciever" },
      { name="publisherA", type="zmq_sender" },
      { name="subscriberA", type="zmq_receiver" },
      { name="publisherB", type="zmq_sender" },
      { name="subscriberB", type="zmq_receiver" },
	  { name="scenesetup", type="rsg_scene_setup" },
	  -- we have to explicitly configure the buffers for large message sized (cf. config setion)
	  { name="bytestreambuffer1",type="lfds_buffers/cyclic_raw" }, 
      { name="bytestreambuffer2",type="lfds_buffers/cyclic_raw" },
      { name="bytestreambuffer3",type="lfds_buffers/cyclic_raw" },
      { name="bytestreambuffer4",type="lfds_buffers/cyclic_raw" },

   },
   
   connections = {
      { src="rsgsenderA.rsg_out", tgt="bytestreambuffer1" },
      { src="bytestreambuffer1", tgt="publisherA.zmq_out" },
      
      { src="rsgsenderB.rsg_out", tgt="bytestreambuffer2" },
      { src="bytestreambuffer2", tgt="publisherB.zmq_out" },
            
      { src="subscriberA.zmq_in", tgt="bytestreambuffer3" },
      { src="bytestreambuffer3", tgt="rsgrecieverA.rsg_in" },
      
      { src="subscriberB.zmq_in", tgt="bytestreambuffer4" },
      { src="bytestreambuffer4", tgt="rsgrecieverB.rsg_in" },
   },
   
   configurations = {
   	  { name="rsgsenderA", config =  { wm_handle={wm = wm:getHandle().wm} } },
   	  { name="rsgsenderB", config =  { wm_handle={wm = wm_replica:getHandle().wm} } },
   	  { name="rsgrecieverA", config =  { wm_handle={wm = wm:getHandle().wm} } },
   	  { name="rsgrecieverB", config =  { wm_handle={wm = wm_replica:getHandle().wm} } },
      { name="publisherA", config = { connection_spec="tcp://*:11411" } },
      { name="publisherB", config = { connection_spec="tcp://*:11511" } },
      { name="subscriberA", config = { connection_spec= "tcp://localhost:11411"  } },	
      { name="subscriberB", config = { connection_spec= "tcp://localhost:11511"  } },		
      { name="scenesetup", config =  { wm_handle={wm = wm:getHandle().wm} } },
      { name="bytestreambuffer1", config = { element_num=10 , element_size=20000 } },
      { name="bytestreambuffer2", config = { element_num=10 , element_size=20000 } },
      { name="bytestreambuffer3", config = { element_num=10 , element_size=20000 } },
      { name="bytestreambuffer4", config = { element_num=10 , element_size=20000 } },							
   },
}
